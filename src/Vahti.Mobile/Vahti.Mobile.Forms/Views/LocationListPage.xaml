<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="Vahti.Mobile.Forms.Views.LocationListPage"
             xmlns:fonticons="clr-namespace:Vahti.Mobile.Forms.Views.Fonts"
             xmlns:custom="clr-namespace:Vahti.Mobile.Forms.Views.Custom"
             xmlns:selector="clr-namespace:Vahti.Mobile.Forms.Views.Templates"
             xmlns:i18n="clr-namespace:Vahti.Mobile.Forms.Localization"
             xmlns:behaviors="clr-namespace:Vahti.Mobile.Forms.Behaviors"
             xmlns:converters="clr-namespace:Vahti.Mobile.Forms.Converters"
             xmlns:sharedEnum="clr-namespace:Vahti.Shared.Enum;assembly=Vahti.Shared"
             x:Name="locationListPage"
             Title="{Binding Title}"                          
             >
        
    <ContentPage.ToolbarItems>
        <ToolbarItem IconImageSource="ic_toolbar_refresh.png" Text="{i18n:Translate Locations_UpdateButtonText}" Command="{Binding RefreshListCommand}" CommandParameter="{StaticResource True}"/>
    </ContentPage.ToolbarItems>
    <ContentPage.Behaviors>
        <behaviors:EventToCommandBehavior EventName="Appearing" Command="{Binding RefreshListCommand}" CommandParameter="{StaticResource False}" />
    </ContentPage.Behaviors>
    <ContentPage.Resources>
        <ResourceDictionary>
            <Color x:Key="ListPageBackground">Transparent</Color>
            <Style x:Key="IconLabelStyle" TargetType="Label">
                <Setter Property="FontSize" Value="22"/>
                <Setter Property="TextColor" Value="{DynamicResource ThemeTextColor}"/>
                <Setter Property="BackgroundColor" Value="{StaticResource ListPageBackground}"/>
            </Style>            
            <Style x:Key="BaseLabelStyle" TargetType="Label" >
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="TextColor" Value="{DynamicResource ThemeTextColor}"/>
                <Setter Property="BackgroundColor" Value="{StaticResource ListPageBackground}"/>
            </Style>
            <Style x:Key="ItemHeaderLabelStyle" TargetType="Label" BasedOn="{StaticResource BaseLabelStyle}">
                <Setter Property="FontSize" Value="20"/>                
            </Style>
            <Style x:Key="StatusTextLabelStyle" TargetType="Label" BasedOn="{StaticResource BaseLabelStyle}">
                <Setter Property="FontSize" Value="14"/>                
            </Style>
            <Style x:Key="StatusIconLabelStyle" TargetType="Label" BasedOn="{StaticResource IconLabelStyle}">
                <Setter Property="FontSize" Value="14"/>
            </Style>
            <ResourceDictionary>
                <converters:SelectedItemEventArgsToSelectedItemConverter x:Key="SelectedItemConverter" />
                <converters:StringToDoubleConverter x:Key="StringToDoubleConverter"/>
                <converters:SecondsToLastChargedConverter x:Key="SecondsToLastChargedConverter"/>
                <DataTemplate x:Key="mowerTemplate">
                    <StackLayout Orientation="Horizontal" Padding="4,4,8,4" >
                        <Label Margin="0,0,0,0" FontFamily="{StaticResource FontAwesomeSolid}" Style="{StaticResource IconLabelStyle}" VerticalTextAlignment="Center" Text="{x:Static fonticons:FontIcons.FontAwesomeCut}">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label" Binding="{Binding Value}" Value="0">
                                    <Setter Property="Text" Value="{x:Static fonticons:FontIcons.FontAwesomeChargingStation}"/>
                                </DataTrigger>                               
                            </Label.Triggers>
                        </Label>
                        <Label Margin="4,0,0,0" LineBreakMode="NoWrap" Style="{StaticResource BaseLabelStyle}" VerticalTextAlignment="Center" FontSize="16" Text="{Binding Value, Converter={StaticResource SecondsToLastChargedConverter}}"/>
                    </StackLayout>
                </DataTemplate>
                <DataTemplate x:Key="defaultTemplate">                                     
                    <StackLayout Orientation="Horizontal" Padding="4,4,8,4">
                            <Label Margin="0,0,0,0" FontFamily="{StaticResource WeatherIconsRegular}" Style="{StaticResource IconLabelStyle}" VerticalTextAlignment="Center">
                                <Label.Triggers>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Temperature}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.WeatherIconsThermometer}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource WeatherIconsRegular}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Humidity}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.WeatherIconsHumidity}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource WeatherIconsRegular}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Pressure}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.WeatherIconsBarometer}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource WeatherIconsRegular}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.BatteryVoltage}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.FontAwesomeBatteryHalf}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource FontAwesomeSolid}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.AccelerationX}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.WeatherIconsRight}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource WeatherIconsRegular}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.AccelerationY}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.WeatherIconsDown}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource WeatherIconsRegular}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.AccelerationZ}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.WeatherIconsUpLeft}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource WeatherIconsRegular}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Rssi}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.FontAwesomeSignal}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource FontAwesomeSolid}"/>
                                    </DataTrigger>
                                    <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.MovementCounter}">
                                        <Setter Property="Text" Value="{x:Static fonticons:FontIcons.FontAwesomeArrows}"/>
                                        <Setter Property="FontFamily" Value="{StaticResource FontAwesomeSolid}"/>
                                    </DataTrigger>
                                    <MultiTrigger TargetType="Label">
                                            <MultiTrigger.Conditions>
                                            <BindingCondition Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.LastCharged}" />                                        
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Text" Value="{x:Static fonticons:FontIcons.FontAwesomeBatteryHalf}" />
                                            <Setter Property="FontFamily" Value="{StaticResource FontAwesomeSolid}"/>
                                        </MultiTrigger>                                   

                            </Label.Triggers>                            
                            </Label>
                        <Label Margin="4,0,0,0" LineBreakMode="NoWrap" Style="{StaticResource BaseLabelStyle}" VerticalTextAlignment="Center">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Temperature}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F1}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Humidity}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F0}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Pressure}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F0}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.AccelerationX}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F3}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.AccelerationY}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F3}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.AccelerationZ}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F3}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.BatteryVoltage}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F3}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.Rssi}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F0}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.MovementCounter}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F0}', Converter={StaticResource StringToDoubleConverter}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label" Binding="{Binding Path=SensorClass}" Value="{x:Static sharedEnum:SensorClass.LastCharged}">
                                    <Setter Property="Text" Value="{Binding Value, StringFormat='{}{0:F0}', Converter={StaticResource StringToDoubleConverter}}"/>                                   
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                        <Label Text="{Binding Unit}" FontFamily="{StaticResource WeatherIconsRegular}" Style="{StaticResource IconLabelStyle}" VerticalTextAlignment="Center" Margin="2,0,0,0"></Label>
                    </StackLayout>                
                   
                </DataTemplate>
                <selector:MeasurementDataTemplateSelector x:Key="measurementDataTemplateSelector" 
                                                     MowerTemplate="{StaticResource mowerTemplate}" 
                                                     DefaultTemplate="{StaticResource defaultTemplate}" />
            </ResourceDictionary>
        </ResourceDictionary>
    </ContentPage.Resources>

    <custom:GradientColorStackLayout StartColor="{DynamicResource ThemeBackgroundLightColor}" EndColor="{DynamicResource ThemeBackgroundColor}" Margin="0,0,0,0" Padding="16,12,16,12">
        <StackLayout Orientation="Horizontal" Margin="0,4,0,4" IsVisible="{Binding IsOldData}">
            <Label Text="{x:Static fonticons:FontIcons.FontAwesomeExclamation}" Style="{StaticResource StatusTextLabelStyle}" FontFamily="{StaticResource FontAwesomeSolid}" VerticalOptions="Center"/>
            <Label Text="{Binding LastUpdated}" IsVisible="{Binding IsOldData}" Style="{StaticResource StatusTextLabelStyle}" VerticalTextAlignment="Center" />
        </StackLayout>
        
        <RefreshView
             Command="{Binding RefreshListCommand}"
             CommandParameter="{StaticResource True}"
             IsRefreshing="{Binding IsBusy, Mode=OneWay}"
            >
            <CollectionView
            x:Name="LocationList"                   
            IsGrouped="true"
            ItemsSource="{Binding Locations}"
            VerticalOptions="EndAndExpand"                  
            ItemTemplate="{StaticResource measurementDataTemplateSelector}"
            SelectedItem="{Binding SelectedMeasurement, Mode=TwoWay}"
                SelectionMode="Single"
            SelectionChanged="LocationList_SelectionChanged"
            SelectionChangedCommand="{Binding SelectItemCommand}"
                >
                <CollectionView.EmptyView>
                    <StackLayout>
                        <Label Text="{Binding NoDataMessage}"
                               Style="{StaticResource StatusTextLabelStyle}"
                               HorizontalOptions="Fill"
                               HorizontalTextAlignment="Start"/>                        
                    </StackLayout>
                </CollectionView.EmptyView>
                <CollectionView.ItemsLayout>
                    <GridItemsLayout Orientation="Vertical"
                        Span="2" />
                </CollectionView.ItemsLayout>
                <CollectionView.GroupHeaderTemplate>
                    <DataTemplate>
                        <StackLayout Orientation="Horizontal" HorizontalOptions="FillAndExpand" BackgroundColor="{StaticResource ThemeLocationHeaderColor}">
                            <StackLayout.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding BindingContext.TapLocationCommand, Source={x:Reference locationListPage} }" CommandParameter="{Binding Name}" NumberOfTapsRequired="1" />
                            </StackLayout.GestureRecognizers>
                            <Label VerticalOptions="Center" Text="{Binding Name}" Style="{StaticResource ItemHeaderLabelStyle}" Padding="8,4,0,4"/>
                            <Label HorizontalOptions="EndAndExpand" VerticalOptions="Center" FontFamily="{StaticResource FontAwesomeSolid}" Style="{StaticResource IconLabelStyle}" VerticalTextAlignment="Center" Text="{x:Static fonticons:FontIcons.FontAwesomeChevronRight}" FontSize="18" Padding="0,0,8,0"/>
                        </StackLayout>                        
                    </DataTemplate>
                </CollectionView.GroupHeaderTemplate>
                <CollectionView.GroupFooterTemplate>
                    <DataTemplate>
                        <Label Padding="8,0,8,0"/>
                    </DataTemplate>
                </CollectionView.GroupFooterTemplate>
            </CollectionView>
        </RefreshView>
    </custom:GradientColorStackLayout>
        
</ContentPage>